import Flutter
import UIKit

public class SwiftTextureHubPlugin: NSObject, FlutterPlugin {
  /// Registers this plugin using the context information and callback registration
  /// methods exposed by the given registrar.
  ///
  /// The registrar is obtained from a `FlutterPluginRegistry` which keeps track of
  /// the identity of registered plugins and provides basic support for cross-plugin
  /// coordination.
  ///
  /// The caller of this method, a plugin registrant, is usually autogenerated by
  /// Flutter tooling based on declared plugin dependencies. The generated registrant
  /// asks the registry for a registrar for each plugin, and calls this method to
  /// allow the plugin to initialize itself and register callbacks with application
  /// objects available through the registrar protocol.
  ///
  /// - parameters:
  ///    - registrar:  A helper providing application context and methods for
  ///     registering callbacks.
  ///
  public static func register(with registrar: FlutterPluginRegistrar) {
    let channel = FlutterMethodChannel(name: "flutter.plugins.io/texture_hub",
                                       binaryMessenger: registrar.messenger())
    let slots = TextureSlots(textureRegistry: registrar.textures())
    let instance = SwiftTextureHubPlugin(slots)
    registrar.addMethodCallDelegate(instance, channel: channel)
    // Publish `TextureHubAdapter` to the plugin registrar so that external services
    // can retrieve it via `FlutterPluginRegistry.valuePublishedByPlugin("TextureHubPlugin")`
    registrar.publish(TextureHubAdapter(slots))
  }

  private let slots: TextureSlots

  init(_ slots: TextureSlots) {
    self.slots = slots
  }
  
  /// Called if this plugin has been registered to receive `FlutterMethodCall`s.
  ///
  /// - parameters:
  ///   - call:   The method call command object.
  ///   - result: A callback for submitting the result of the call.
  public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    switch call.method {
    case "listSlots":
      listSlots(call, result: result)
    case "allocateSlot":
      allocateSlot(call, result: result)
    case "deallocatSlot":
      deallocateSlot(call, result: result)
    case "createTexture":
      createTexture(call, result: result)
    case "getTextureId":
      getTextureId(call, result: result)
    default:
      result(FlutterMethodNotImplemented)
    }
  }

  func listSlots(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    var slots = [TextureSlot]()
    slots.forEach { slots.append($0) }
    result(slots)
  }
  
  func allocateSlot(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    guard let args = call.arguments as? [String: Any] else { return result(invalidArg()) }
    guard let handle = args["handle"] as? Int64 else { return result(handleNotFound()) }

    let tag = args["tag"] as? String
    let keepLatest = args["keepLatest"] as? Bool ?? false
    let useCopy = args["useCopy"] as? Bool ?? false
    let useTextureWidget = args["useTextureWidget"] as? Bool ?? false
    slots.allocateSlot(handle: handle,
                       tag: tag,
                       keepLatest: keepLatest,
                       useCopy: useCopy,
                       useTextureWidget: useTextureWidget)
    let textureId = slots.getTextureId(handle: handle)
    result(["textureId": textureId])
  }

  func deallocateSlot(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    guard let args = call.arguments as? [String: Any] else { return result(invalidArg()) }
    guard let handle = args["handle"] as? Int64 else { return result(handleNotFound()) }

    slots.deallocateSlot(handle: handle)
    result(nil)
  }
  
  func createTexture(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    guard let args = call.arguments as? [String: Any] else { return result(invalidArg()) }
    guard let handle = args["handle"] as? Int64 else { return result(handleNotFound()) }

    let textureId = slots.createTexture(handle: handle)
    result(["textureId": textureId])
  }

  func getTextureId(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    guard let args = call.arguments as? [String: Any] else { return result(invalidArg()) }
    guard let handle = args["handle"] as? Int64 else { return result(handleNotFound()) }

    let textureId = slots.getTextureId(handle: handle)
    result(["textureId": textureId])
  }

  func invalidArg() -> FlutterError {
    return FlutterError(code: "INVALIDARG", message: "Invalid argument", details: nil)
  }

  func handleNotFound() -> FlutterError {
    return FlutterError(code: "INVALIDARG", message: "Handle not found", details: nil)
  }
}

